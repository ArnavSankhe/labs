function result = nested_cross_validation(...
    predictors, ...
    target,...
    model_type,...
    result,...
    outer_folds, ...
    inner_folds, ...
    C,...
    Epsilon,...
    Kernel...
)
    n_samples = size(predictors, 1);

    sum_metric = 0;
    
    % When the outer fold size cannot be divided into a natural number
    % will be using the floor of possibles folds and adding the final
    % records to the last fold.
    outer_fold_size = floor(n_samples/outer_folds);
    
    % Outer fold cross-validation
    for o=1: outer_folds
        outer_fold_start = 1 + (o-1)*outer_fold_size;
        outer_fold_end   = o*outer_fold_size;
        
        % the last fold will always hold the whole set of last items
        if o == outer_folds
            outer_fold_range = (outer_fold_start:n_samples);
        else
            outer_fold_range = (outer_fold_start:outer_fold_end);
        end

        % Obtain train split
        X_train = predictors;
        y_train = target;
        X_train(outer_fold_range,:) = [];
        y_train(outer_fold_range,:) = [];
    
        % Obtain test split
        X_test = predictors(outer_fold_range,:);
        y_test = target(outer_fold_range,:);
        
        % Make the hyperparameter tunning and return the template of 
        % parameters with the best fit based on the inner fold fit.
        [best_hyperparameters, result] = grid_search( ...
            X_train, ...
            y_train, ...
            model_type, ...
            result,...
            inner_folds, ...
            o, ...
            C, ...
            Epsilon, ...
            Kernel ...
        );

        model = fit_model(X_train, y_train, model_type, best_hyperparameters);

        % Evaluate model on test split
        y_pred = predict(model,X_test);
        metric = evaluate_metric(y_test, y_pred, model_type);
        sum_metric = metric + sum_metric;

        fprintf("Fitting %s model in outerfold %f, with params " + ...
            "C %f" + ...
            ", kernel: %s" + ...
            ", polynomial order: %f" + ...
            ", epsilon: %f" + ...
            ", kernel scale: %f" + ...
            ", support vector kept: %f" + ...
            ", per support vector kept: %f" + ...
            ", metric = %f\n\n",...
        model_type, ...
        o,...
        best_hyperparameters('BoxConstraint'), ...
        best_hyperparameters('KernelFunction'), ...
        best_hyperparameters('PolynomialOrder'),...
        best_hyperparameters('Epsilon'),...
        best_hyperparameters('KernelScale'),...
        size(model.SupportVectors, 1), ...
        floor((size(model.SupportVectors, 1)/model.NumObservations)*100),...
        metric);
    end

    fprintf("Average metric in %f folds for %s: %f\n\n\n", ...
        outer_folds, model_type, sum_metric/outer_folds);
    
end